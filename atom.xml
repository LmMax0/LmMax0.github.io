<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>凉大虾の博客</title>
  
  <subtitle>今日事，今日毕</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2021-06-01T16:58:17.367Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>LM_Max</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何使用Hexo来搭建博客</title>
    <link href="http://example.com/2021/05/27/hello-world/"/>
    <id>http://example.com/2021/05/27/hello-world/</id>
    <published>2021-05-27T08:20:34.723Z</published>
    <updated>2021-06-01T16:58:17.367Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post-创建新文章"><a href="#Create-a-new-post-创建新文章" class="headerlink" title="Create a new post(创建新文章)"></a>Create a new post(创建新文章)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;文章标题&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server-启动本地服务"><a href="#Run-server-启动本地服务" class="headerlink" title="Run server(启动本地服务)"></a>Run server(启动本地服务)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files-构建静态资源"><a href="#Generate-static-files-构建静态资源" class="headerlink" title="Generate static files(构建静态资源)"></a>Generate static files(构建静态资源)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites-推向远程仓库"><a href="#Deploy-to-remote-sites-推向远程仓库" class="headerlink" title="Deploy to remote sites(推向远程仓库)"></a>Deploy to remote sites(推向远程仓库)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>JAVA面试</title>
    <link href="http://example.com/2021/05/02/JAVA%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2021/05/02/JAVA%E5%9F%BA%E7%A1%80/</id>
    <published>2021-05-01T16:59:48.000Z</published>
    <updated>2021-06-03T01:51:08.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对于面向对象的理解"><a href="#对于面向对象的理解" class="headerlink" title="对于面向对象的理解"></a>对于面向对象的理解</h1><blockquote><p><strong>面向对象</strong>  (Object Oriented,OO) 的思想对软件开发相当重要，它的概念和应用甚至已超越了程序设计和软件开发，扩展到如数据库系统、交互式界面、应用结构、应用平台、分布式系统、网络管理结构、CAD 技术、人工智能等领域。面向对象是一种 对现实世界理解和抽象的方法，是计算机编程技术发展到一定阶段后的产物。<strong>面向过程</strong>(Procedure Oriented) 是一种 <strong>以过程为中心</strong> 的编程思想。这些都是以什么正在发生为主要目标进行编程，不同于面向对象的是谁在受影响。与面向对象明显的不同就是<br><em><strong>封装、继承、类</strong></em>。无论是在软件开发还是在实际工作中，深入地理解软件开发的思想都非常有必要。<br>作者：力扣（LeetCode）<br>链接：<a href="https://www.zhihu.com/question/27468564/answer/757537214">https://www.zhihu.com/question/27468564/answer/757537214</a><br>来源：知乎<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote><p>提到<strong>面向对象</strong>自然需要想到<strong>面向过程</strong>。在我看来，面向过程是将自身程序带入中，切身去执行每一步实现程序最终目的的过程,即以过程为中心。面向对象就是如果你要完成某个问题，你需要让谁去完成这个事情，你是一名组织者。</p><p>面向对象具有<strong>继承</strong>、<strong>封装</strong>和<strong>多态</strong> 3 个核心特性。</p><h1 id="JDK与JRE的区别"><a href="#JDK与JRE的区别" class="headerlink" title="JDK与JRE的区别"></a>JDK与JRE的区别</h1><ul><li><p>JDK：Java Development Kit 的简称，java 开发工具包，提供了 java 的开发环境和运行环境。</p></li><li><p>JRE：Java Runtime Environment 的简称，java 运行环境，为 java 的运行提供了所需环境。</p></li></ul><p><strong>JDK 其实包含了 JRE</strong>，同时还包含了编译 java 源码的编译器 javac，还包含了很多 java 程序调试和分析的工具。简单来说：<em><strong>如果你需要运行 java 程序，只需安装 JRE 就可以了，如果你需要编写 java 程序，需要安装 JDK</strong></em>。</p><h1 id="与-eqluals-之间的区别"><a href="#与-eqluals-之间的区别" class="headerlink" title="== 与 eqluals()之间的区别"></a>== 与 eqluals()之间的区别</h1><p>在java中的基本数据类型有<br><strong>int、byte、short、long、double、float、char、boolean</strong> 8种。</p><p>java 为每种基本类型都提供了对应的封装类型，分别为：<br><strong>Integer、Byte、Short、Long、Double、Double、Float、Char、Boolean</strong>。</p><p><strong>引用类型是一种对象类型</strong>，它的值是指向内存空间的引用，就是地址。</p><p>==的判别分为对基本类型和基本引用类型的比较。基本类型比较的是值是否相同，引用类型比较的是值，引用类型比较的是引用是否相同。值得一提的是<strong>在java中只有值传递，所谓的引用传递，传递的是引用的值</strong><br>本质上equals也是==而已，只不过许多类String或者是Integer中重写了他们的equals()方法而已,转化成了值上的比较。<br>Java 8中Object类中的equals()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Java 8中String类、Integer类中的equals()方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java 8 -String类中equals()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//java 8 -Integer类中equals()</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        <span class="keyword">return</span> value == ((Integer)obj).intValue();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="java-中操作字符串"><a href="#java-中操作字符串" class="headerlink" title="java 中操作字符串"></a>java 中操作字符串</h1><p><strong>操作字符串的类有：String、StringBuffer、StringBuilder。</strong></p><p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以<strong>在经常改变字符串内容的情况下最好不要使用 String</strong>。<br>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在<strong>单线程环境下推荐使用 StringBuilder</strong>，<strong>多线程环境下推荐使用 StringBuffer</strong>。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;对于面向对象的理解&quot;&gt;&lt;a href=&quot;#对于面向对象的理解&quot; class=&quot;headerlink&quot; title=&quot;对于面向对象的理解&quot;&gt;&lt;/a&gt;对于面向对象的理解&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;面向对象&lt;/strong&gt;  (Objec</summary>
      
    
    
    
    
    <category term="JAVA" scheme="http://example.com/tags/JAVA/"/>
    
    <category term="面试" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
